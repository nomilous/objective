// Generated by CoffeeScript 1.9.2
var Pipeline, TODO, debug, deferred, error, info, pipeline, ref, ref1;

ref = require('also'), pipeline = ref.pipeline, deferred = ref.deferred;

ref1 = require('../logger'), error = ref1.error, debug = ref1.debug, TODO = ref1.TODO, info = ref1.info;

TODO('report on hung pipes at program exit');

TODO('queued pipeline');

module.exports = Pipeline = {
  pipes: {},
  createEvent: function(event) {
    var base;
    debug("pipeline created event '" + event + "'");
    return (base = Pipeline.pipes)[event] || (base[event] = []);
  },
  emit: function(event, payload, callback) {
    var cancelled, cancelledReason, fn, pipe;
    if (!(pipe = Pipeline.pipes[event])) {
      return callback(new Error("No handlers for '" + event + "'."));
    }
    debug("pipeline emitted event '" + event + "'");
    cancelled = false;
    cancelledReason = 'reason unspecified';
    return pipeline((function() {
      var i, len, results;
      results = [];
      for (i = 0, len = pipe.length; i < len; i++) {
        fn = pipe[i];
        results.push((function(fn) {
          return deferred(function(action) {
            debug("pipeline event handler running event '" + event + "'");
            return objective.injector({
              args: [payload],
              next: action.resolve,
              onError: action.reject,
              cancel: function(reason) {
                if (reason != null) {
                  cancelledReason = reason;
                }
                cancelled = true;
                return action.reject();
              }
            }, fn);
          });
        })(fn));
      }
      return results;
    })()).then(function(result) {
      debug("pipeline event '" + event + "' done ok");
      return callback(null, payload);
    }, function(err) {
      if (cancelled) {
        info("pipeline event '" + event + "' cancelled because '" + cancelledReason + "'");
        return;
      }
      console.log(err.stack);
      error("pipeline event '" + event + "' failed " + (err.toString()));
      return callback(err);
    }, function(notify) {});
  },
  on: function(event, fn) {
    var base;
    debug("pipeline registering handler on event '" + event + "'");
    (base = Pipeline.pipes)[event] || (base[event] = []);
    return Pipeline.pipes[event].push(fn);
  }
};
