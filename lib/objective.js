// Generated by CoffeeScript 1.9.2
var deferred, fs, path, pipeline, program, ref, required;

Object.defineProperty(global, 'objective', {
  writable: false,
  value: {}
});

program = require('./cli');

if (program.stop) {
  return;
}

ref = require('also'), deferred = ref.deferred, pipeline = ref.pipeline;

path = require('path');

fs = require('fs');

required = {};

module.exports = function(config) {
  var base, loadGlobal, moduleName, oldConfig, run;
  if (config == null) {
    config = {};
  }
  if (objective.root != null) {
    (base = objective.root).children || (base.children = {});
    if (objective.root.children[config.uuid] != null) {
      oldConfig = objective.root.children[config.uuid].root;
      console.log("Updating objective from '" + oldConfig.filename + "'");
      config.filename = oldConfig.filename;
      objective.root.children[config.uuid] = {
        root: config
      };
      objective.root.children[config.uuid].doRun = true;
    } else {
      config.filename = objective.loading;
      console.log("Loading objective from '" + config.filename + "'");
      objective.root.children[config.uuid] = {
        root: config
      };
    }
    return {
      run: function(fn) {
        var e, moduleFile;
        objective.root.children[config.uuid].run = fn;
        if (program.run || objective.root.children[config.uuid].doRun) {
          for (moduleFile in require.cache) {
            if (required[moduleFile]) {
              continue;
            }
            delete require.cache[moduleFile];
          }
          console.log("Running objective from '" + config.filename + "'");
          try {
            return fn();
          } catch (_error) {
            e = _error;
            return console.log(e.stack + '\n');
          }
        }
      }
    };
  }
  objective.root = config;
  run = function(e) {
    console.log('Missing .run(fn)');
    if (e != null) {
      return console.log(e.toString());
    }
  };
  loadGlobal = function(name, path) {
    if (objective[name] != null) {
      console.log("Warning: global " + name + " no loaded.");
      return;
    }
    objective[name] = require(path);
    if (name === 'coffee') {
      return objective.coffee.register();
    }
  };
  loadGlobal('recurse', './globals/recurse');
  loadGlobal('coffee', 'coffee-script');
  loadGlobal('uplink', './globals/uplink');
  loadGlobal('prompt', './globals/prompt');
  loadGlobal('pipe', './globals/pipeline');
  config.plugins || (config.plugins = []);
  pipeline((function() {
    var j, len, ref1, results;
    ref1 = config.plugins;
    results = [];
    for (j = 0, len = ref1.length; j < len; j++) {
      moduleName = ref1[j];
      results.push((function(moduleName) {
        return deferred(function(arg) {
          var camel, e, i, k, name, p, parts, ref2, reject, resolve;
          resolve = arg.resolve, reject = arg.reject;
          name = moduleName.split(path.sep).pop().replace(/^objective-/, '');
          if (name.match(/[-\._]/)) {
            parts = name.split(/[-\._]/);
            camel = parts[0];
            for (i = k = 1, ref2 = parts.length - 1; 1 <= ref2 ? k <= ref2 : k >= ref2; i = 1 <= ref2 ? ++k : --k) {
              p = parts[i][0].toUpperCase();
              camel += p + parts[i].slice(1);
            }
            name = camel;
          }
          if (global[name] != null) {
            return reject(new Error("Plugin " + moduleName + " collides with global." + name));
          }
          try {
            global[name] = require(moduleName);
          } catch (_error) {
            e = _error;
            return reject(e);
          }
          console.log("Loading plugin '" + moduleName + "' as '" + name + "'");
          try {
            global[name].init(function(e) {
              if (e != null) {
                return reject(e);
              }
            });
          } catch (_error) {
            e = _error;
            return reject(e);
          }
          return resolve();
        });
      })(moduleName));
    }
    return results;
  })()).then(function(result) {
    return process.nextTick(function() {
      var dir, filename;
      for (filename in require.cache) {
        required[filename] = {};
      }
      if (program.recurse != null) {
        if (typeof program.recurse !== 'string') {
          console.log("\nRecurse needs [dir]");
          return;
        }
        dir = program.recurse;
        return objective.recurse(dir, function(err) {
          if (err != null) {
            return run(err);
          }
          return run(null);
        });
      }
      return run(null);
    });
  }, function(error) {
    return process.nextTick(function() {
      return run(error);
    });
  });
  return {
    run: function(fn) {
      return run = fn;
    }
  };
};
