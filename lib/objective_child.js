// Generated by CoffeeScript 1.9.2
var TODO, debug, defer, deferrals, error, info, init, promise, ref, ref1, sep, sequence;

ref = require('./logger'), debug = ref.debug, TODO = ref.TODO, info = ref.info, error = ref.error;

ref1 = require('when'), promise = ref1.promise, defer = ref1.defer;

sequence = require('when/sequence');

sep = require('path').sep;

init = require('./objective_init');

deferrals = [];

module.exports.nextPromise = function() {
  if (!(deferrals.length > 0)) {
    return false;
  }
  return deferrals.shift().promise;
};

module.exports.load = function(config, callback) {
  var base, caller, deferral, objectiveFn;
  objective.node || (objective.node = {});
  (base = objective.node).children || (base.children = {});
  objectiveFn = function() {};
  deferrals.push(deferral = defer());
  init.globals().then(function() {
    return init.user(config);
  }).then(function() {
    return init.plugins(config);
  }).then(function() {
    return module.exports.run(config, objectiveFn, deferral);
  })["catch"](function(e) {
    return deferral.reject(e);
  });
  if (callback != null) {
    caller = objective.getCallerFileName(3);
    caller = caller.replace(process.cwd() + sep, '');
    config.filename = caller;
    objectiveFn = callback;
    objective.currentChild = config;
    return;
  }
  return {
    run: function(fn) {
      caller = objective.getCallerFileName(2);
      caller = caller.replace(process.cwd() + sep, '');
      config.filename = caller;
      objectiveFn = fn;
      return objective.currentChild = config;
    }
  };
};

module.exports.run = function(config, objectiveFn, deferral) {
  var clearRequire, filename, name, required;
  required = {};
  for (filename in require.cache) {
    required[filename] = {};
  }
  clearRequire = function() {
    var results;
    results = [];
    for (filename in require.cache) {
      if (required[filename] != null) {
        continue;
      }
      delete require.cache[filename];
      results.push(debug("Removed " + filename + " from require cache"));
    }
    return results;
  };
  if (!((config.uuid != null) && config.uuid.length > 10)) {
    config.uuid = config.filename;
  }
  TODO('beforeAll, afterALL/Each for plugins');
  return sequence((function() {
    var results;
    results = [];
    for (name in objective.plugins) {
      results.push((function(name) {
        return function() {
          return promise(function(resolve, reject) {
            var plugin;
            debug("Running beforeEach in plugin '" + name + "'");
            plugin = objective.plugins[name];
            if (plugin.$$beforeEach && typeof plugin.$$beforeEach === 'function') {
              return plugin.$$beforeEach(config, function(err) {
                if (err != null) {
                  return reject(err);
                }
                return resolve();
              });
            }
            return resolve();
          });
        };
      })(name));
    }
    return results;
  })()).then(function() {
    var e, running;
    if (objectiveFn.toString() === 'function () {}') {
      return process.nextTick(function() {
        clearRequire();
        return deferral.resolve();
      });
    }
    try {
      running = objective.injector({}, objectiveFn);
      if ((running != null) && (running.then != null) && typeof running.then === 'function') {
        running.then(function(result) {
          objective.currentChild = {};
          clearRequire();
          return deferral.resolve(result);
        }, function(error) {
          objective.currentChild = {};
          clearRequire();
          return deferral.reject;
        }, deferral.notify);
        if ((running.start != null) && typeof running.start === 'function') {
          running.start();
        }
        return;
      }
      return process.nextTick(function() {
        clearRequire();
        objective.currentChild = {};
        return deferral.resolve();
      });
    } catch (_error) {
      e = _error;
      clearRequire();
      objective.currentChild = {};
      return deferral.reject(e);
    }
  })["catch"](function(e) {
    TODO('objective gets e, or err, error if in args');
    error('error in plugin beforeEach');
    error(e.stack);
    return deferral.reject(e);
  });
};
