// Generated by CoffeeScript 1.9.2
var TODO, debug, error, info, normalize, promise, ref, ref1, sep, sequence;

ref = require('./logger'), debug = ref.debug, info = ref.info, error = ref.error, TODO = ref.TODO;

promise = require('when').promise;

sequence = require('when/sequence');

ref1 = require('path'), sep = ref1.sep, normalize = ref1.normalize;

module.exports.user = function(config) {
  return promise(function(resolve, reject) {
    var configDir, defaultPlugins, user, userFile;
    config.plugins || (config.plugins = []);
    defaultPlugins = function(defaults) {
      var i, len, plugin, results;
      if (defaults == null) {
        defaults = [];
      }
      debug('Loading plugin defaults from user');
      results = [];
      for (i = 0, len = defaults.length; i < len; i++) {
        plugin = defaults[i];
        if (typeof plugin === 'string') {
          if (config.plugins.indexOf(plugin) !== -1) {
            continue;
          }
        }
        results.push(config.plugins.push(plugin));
      }
      return results;
    };
    if (objective.user != null) {
      debug('User already loaded');
      defaultPlugins(objective.user.plugins);
      return resolve();
    }
    configDir = process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'] + sep + '.objective';
    userFile = configDir + sep + 'user';
    try {
      debug("Loading user from file '" + userFile + "'");
      user = require(userFile);
      if ((user.init != null) && typeof user.init === 'function') {
        debug('User has init(), running.');
        return user.init(function(err) {
          if (err != null) {
            debug('User init error ' + err);
            return reject(err);
          }
          objective.user = user;
          defaultPlugins(user.plugins);
          debug('User loaded.');
          return resolve();
        });
      }
      objective.user = user;
      defaultPlugins(user.plugins);
      debug('User loaded without init()');
      return resolve();
    } catch (_error) {
      objective.user = 'none';
      return resolve();
    }
  });
};

module.exports.globals = function() {
  return promise(function(resolve, reject) {
    var loadGlobal;
    if (objective.globals != null) {
      debug('Globals already loaded.');
      return resolve();
    }
    loadGlobal = function(name, path) {
      if (objective[name] != null) {
        info("Warning: global " + name + " not loaded.");
        return;
      }
      debug("Loading global 'objective." + name + "'");
      objective[name] = require(path);
      if (name === 'coffee') {
        objective.coffee.register();
      }
      objective.globals || (objective.globals = []);
      return objective.globals.push(name);
    };
    loadGlobal('recurse', './globals/recurse');
    loadGlobal('coffee', 'coffee-script');
    loadGlobal('uplink', './globals/uplink');
    loadGlobal('prompt', './globals/prompt');
    loadGlobal('pipe', './globals/pipeline');
    loadGlobal('injector', './globals/injector');
    loadGlobal('queue', './globals/queue');
    TODO('repeat() global');
    return resolve();
  });
};

module.exports.plugins = function(config) {
  return promise(function(resolve, reject) {
    var plugin;
    TODO('user defaults per plugin $$name');
    if (!(config.plugins.length > 0)) {
      debug('No plugins to load');
      return resolve();
    }
    return sequence((function() {
      var i, len, ref2, results;
      ref2 = config.plugins;
      results = [];
      for (i = 0, len = ref2.length; i < len; i++) {
        plugin = ref2[i];
        results.push((function(plugin) {
          return function() {
            return promise(function(resolve, reject) {
              var defaults, e, key, mod, name;
              if (typeof plugin === 'string') {
                if (plugin.match(/\.\//)) {
                  plugin = normalize(process.cwd() + sep + plugin);
                }
                try {
                  debug("Loading plugin from '" + plugin + "'");
                  mod = require(plugin);
                  if ((objective.user != null) && (defaults = objective.user.defaults[plugin])) {
                    debug("Loading user defaults for plugin " + plugin);
                    for (key in defaults) {
                      mod[key] = defaults[key];
                    }
                  }
                } catch (_error) {
                  e = _error;
                  return reject(e);
                }
              }
              if (mod.$$name == null) {
                return reject(new Error('Objective plugins must respond to $$name property.'));
              }
              name = mod.$$name;
              objective.plugins || (objective.plugins = {});
              if (objective.plugins[name] != null) {
                debug("Plugin '" + name + "' already loaded.");
                return resolve();
              }
              if ((mod.init != null) && typeof mod.init === 'function') {
                return mod.init(function(err) {
                  if (err != null) {
                    debug("Plugin '" + name + "' init failed " + (err.toString()));
                    return reject(err);
                  }
                  debug("Plugin '" + name + "' loaded.");
                  objective.plugins[name] = mod;
                  return resolve();
                });
              }
              debug("Plugin '" + name + "' loaded.");
              objective.plugins[name] = mod;
              return resolve();
            });
          };
        })(plugin));
      }
      return results;
    })()).then(resolve)["catch"](reject);
  });
};
