// Generated by CoffeeScript 1.9.2
var appendToCommand, autoComplete, command, cursorScroll, fs, history, historyCursor, historyFile, historyScroll, historySearch, keypress, offset, promptWidth, runCommand, writePrompt;

keypress = require('keypress');

fs = require('fs');

command = '';

promptWidth = '> '.length;

offset = 0;

writePrompt = function(newline) {
  if (newline) {
    return process.stdout.write("\n> " + command);
  }
  return process.stdout.write("> " + command);
};

appendToCommand = function(char) {
  var ch, chars, i, len;
  chars = [];
  for (i = 0, len = command.length; i < len; i++) {
    ch = command[i];
    chars.push(ch);
  }
  chars.splice(command.length - offset, 0, char);
  command = chars.join('');
  process.stdout.clearLine();
  process.stdout.cursorTo(0);
  writePrompt();
  return process.stdout.cursorTo(command.length - offset + promptWidth);
};

runCommand = function() {
  var historyCursor;
  historyCursor = 0;
  command = command.trim();
  if (command.length === 0) {
    return writePrompt(true);
  }
  process.stdout.write('\n');
  console.log({
    run: command
  });
  history.push(command);
  while (history.length > 2000) {
    history.shift();
  }
  command = '';
  return writePrompt(true);
};

autoComplete = function() {
  offset = 0;
  console.log('TODO: autocomplete');
  return writePrompt(true);
};

historyFile = process.env.HOME + '/.objective/command_history';

historyCursor = 0;

history = [];

history = (function() {
  try {
    return fs.readFileSync(historyFile).toString().trim().split('\n');
  } catch (_error) {}
})();

process.on('exit', function() {
  try {
    return fs.writeFileSync(historyFile, history.join('\n'));
  } catch (_error) {}
});

console.log(history);

historySearch = function() {
  console.log('TODO: history search');
  return writePrompt(true);
};

historyScroll = function(direction) {
  var position;
  switch (direction) {
    case 'up':
      position = history.length - 1 - historyCursor;
      if (position !== 0) {
        historyCursor++;
      }
      command = history[position];
      process.stdout.clearLine();
      process.stdout.cursorTo(0);
      return writePrompt(false);
    case 'down':
      position = history.length - 1 - historyCursor;
      if (!(position >= history.length)) {
        historyCursor--;
      }
      command = history[position];
      process.stdout.clearLine();
      process.stdout.cursorTo(0);
      return writePrompt(false);
  }
};

cursorScroll = function(direction) {
  var position;
  position = command.length - offset;
  switch (direction) {
    case 'left':
      if (position !== 0) {
        offset++;
        position--;
        return process.stdout.cursorTo(position + promptWidth);
      }
      break;
    case 'right':
      if (!(position >= command.length)) {
        offset--;
        position++;
        return process.stdout.cursorTo(position + promptWidth);
      }
  }
};

module.exports = function(done) {
  keypress(process.stdin);
  process.stdin.setRawMode(true);
  process.stdin.on('keypress', function(ch, key) {
    if (key == null) {
      return appendToCommand(ch);
    }
    if ((ch != null) && ch.match(/^[a-zA-Z0-9_]*$/)) {
      return appendToCommand(ch);
    }
    try {
      if (key.ctrl && (key.name === 'c' || key.name === 'd')) {
        if (command.length > 0) {
          command = '';
          return writePrompt(true);
        }
        try {
          done();
        } catch (_error) {}
        return process.exit(1);
      }
    } catch (_error) {}
    try {
      if (key.name === 'return') {
        if (command.length > 0) {
          return runCommand();
        }
        return writePrompt(true);
      }
    } catch (_error) {}
    if ((ch != null) && ch === ' ') {
      return appendToCommand(ch);
    }
    try {
      if (key.name === 'tab') {
        return autoComplete();
      }
    } catch (_error) {}
    try {
      if (key.name === 'backspace') {
        if (command.length === 0) {
          return;
        }
        command = command.substr(0, command.length - 1);
        process.stdout.clearLine();
        process.stdout.cursorTo(0);
        writePrompt();
        return;
      }
    } catch (_error) {}
    try {
      if (key.ctrl && key.name === 'r') {
        return historySearch();
      }
    } catch (_error) {}
    try {
      if (key.name === 'up' || key.name === 'down') {
        return historyScroll(key.name);
      }
    } catch (_error) {}
    try {
      if (key.name === 'left' || key.name === 'right') {
        return cursorScroll(key.name);
      }
    } catch (_error) {}
  });
  return writePrompt();
};
