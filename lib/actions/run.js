// Generated by CoffeeScript 1.9.2
var deferred, fs, lang, pipe, pipeline, prompt, recurse, ref, run, sep, uplink;

fs = require('fs');

uplink = require('../uplink');

pipe = require('../pipeline');

pipe.createEvent('objective.init');

recurse = require('../modules/recurse');

prompt = require('../prompt');

sep = require('path').sep;

ref = require('also'), deferred = ref.deferred, pipeline = ref.pipeline;

lang = void 0;

module.exports = run = {
  "do": function(program, callback) {
    var camel, coffee, e, file, i, j, js, k, len, moduleName, name, objective, p, parts, plugins, ref1, ref2;
    file = program.file || 'objective';
    if (!(file.match(/.coffee$/) || file.match(/.js$/))) {
      ['.js', '.coffee'].forEach(function(ext) {
        var stats;
        try {
          stats = fs.lstatSync(file + ext);
          if (!stats.isDirectory()) {
            return file = file + ext;
          }
        } catch (_error) {}
      });
    }
    try {
      js = fs.readFileSync(file).toString();
      if (file.match(/.coffee$/)) {
        coffee = require('coffee-script');
        lang = 'coffee';
        js = coffee.compile(js, {
          bare: true
        });
      } else {
        lang = 'js';
        js = '(' + js + ')';
      }
      if (program.js) {
        lang = 'js';
      }
      objective = eval(js);
      run = function() {
        if (program.offline) {
          return objective.root(function(err) {
            if (err != null) {
              console.log(err.toString());
            }
            return callback();
          });
        }
        return uplink.connect(objective, function(err) {
          if (err != null) {
            console.log(err.toString());
            process.exit(1);
          }
          return objective.root(function(err) {
            if (err != null) {
              console.log(err.toString());
            }
            uplink.disconnect();
            return callback();
          });
        });
      };
      plugins = {};
      if (objective.modules != null) {
        ref1 = objective.modules;
        for (j = 0, len = ref1.length; j < len; j++) {
          moduleName = ref1[j];
          name = moduleName.split(sep).pop().replace(/^objective-/, '');
          if (name.match(/[-\._]/)) {
            parts = name.split(/[-\._]/);
            camel = parts[0];
            for (i = k = 1, ref2 = parts.length - 1; 1 <= ref2 ? k <= ref2 : k >= ref2; i = 1 <= ref2 ? ++k : --k) {
              p = parts[i][0].toUpperCase();
              camel += p + parts[i].slice(1);
            }
            name = camel;
          }
          try {
            plugins[name] = require(moduleName);
            eval("var " + name + " = plugins[name];");
            console.log("Loaded module '" + moduleName + "' as '" + name + "'");
          } catch (_error) {
            e = _error;
            console.log(e.toString());
          }
        }
        pipeline((function() {
          var results;
          results = [];
          for (name in plugins) {
            results.push((function(name) {
              return deferred(function(arg) {
                var plugin, reject, resolve;
                resolve = arg.resolve, reject = arg.reject;
                plugin = plugins[name];
                return plugin.init({
                  pipe: pipe
                }, function(err) {
                  if (err != null) {
                    return reject(err);
                  }
                  return resolve();
                });
              });
            })(name));
          }
          return results;
        })()).then(function(result) {
          return pipe.emit('objective.init', {
            uplink: uplink,
            program: program,
            objective: objective,
            language: lang
          }, function(err) {
            if (err == null) {
              return run();
            }
            console.log(err.toString());
            return callback(err);
          });
        }, function(error) {
          console.log(err.toString());
          return callback(err);
        });
        return;
      }
      return run();
    } catch (_error) {
      e = _error;
      console.log(e);
      return callback();
    }
  }
};
