// Generated by CoffeeScript 1.9.2
var create, deferred, fs, request, user, uuid;

user = require('../user');

request = require('request');

fs = require('fs');

uuid = require('uuid');

deferred = require('also').deferred;

process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

module.exports = create = {
  "do": function(program, template, callback) {
    if (!program.offline) {
      user.load();
    }
    return create.generate_objective(program, template).then(function() {
      return callback();
    });
  },
  generate_objective: deferred(function(action, program, template) {
    var content, createFromTemplate, e, file, stat, stats, templatePath;
    if (program["private"] == null) {
      program["private"] = false;
    }
    file = program.file || 'objective';
    if (program.js) {
      if (!file.match(/\.js$/)) {
        file = file + ".js";
      }
    } else {
      if (!file.match(/\.coffee$/)) {
        file = file + ".coffee";
      }
    }
    try {
      stats = fs.lstatSync(file);
      if (stats.isDirectory()) {
        console.log("\nCannot overwrite directory '" + file + "'");
        return action.resolve();
      }
      if (!program.force) {
        console.log("\nError '" + file + "' exists. Use --force to overwrite.");
        return action.resolve();
      }
    } catch (_error) {}
    if (program.js) {
      templatePath = process.env.HOME + '/.objective/templates/' + template + '.js';
    } else {
      templatePath = process.env.HOME + '/.objective/templates/' + template + '.coffee';
    }
    createFromTemplate = function(template, Uuid) {
      var e, templatetxt;
      Uuid || (Uuid = uuid.v4());
      try {
        templatetxt = void 0;
        try {
          templatetxt = fs.readFileSync(templatePath).toString();
        } catch (_error) {
          console.log("\nError: Missing templates. Try --register");
          action.resolve();
          return;
        }
        templatetxt = templatetxt.replace(/__UUID__/, Uuid);
        templatetxt = templatetxt.replace(/__PRIVATE__/, program["private"]);
        try {
          fs.writeFileSync(file, templatetxt);
          console.log('\n-----> Created file ' + file + ' (from template ~' + templatePath + ')');
          return action.resolve();
        } catch (_error) {
          e = _error;
          console.log(e.toString());
          return action.resolve();
        }
      } catch (_error) {
        e = _error;
        console.log(e.toString());
        return action.resolve();
      }
    };
    if (program.offline) {
      try {
        stat = fs.lstatSync(templatePath);
        return createFromTemplate(template);
      } catch (_error) {
        e = _error;
        console.log("\nWarning: Missing template '" + templatePath + "'");
      }
      if (program.js) {
        content = "objective( 'Untitled', {\n\n    uuid: '" + (uuid.v4()) + "',\n    description: '',\n    private: " + program["private"] + ",\n    plugins: []\n\n}).run(function(){\n\n\n});\n";
      } else {
        content = "objective 'Untitled',\n\n    uuid: '" + (uuid.v4()) + "'\n    description: ''\n    private: " + program["private"] + "\n    plugins: []\n\n.run ->\n\n";
      }
      try {
        fs.writeFileSync(file, content);
        console.log("\n-----> Created file " + file);
        action.resolve();
        return;
      } catch (_error) {
        e = _error;
        console.log(e.toString());
        action.resolve();
        return;
      }
    }
    return request.post({
      url: 'https://ipso.io/api/objectives/create',
      method: 'POST',
      headers: {
        'content-type': 'application/json',
        'key': user.key
      }
    }, function(error, response, body) {
      var Uuid;
      if (error != null) {
        console.log('An error has occurred.');
        process.exit(1);
      }
      if (response.statusCode === 401) {
        console.log('Bad key, try --refresh-user');
        process.exit(1);
      }
      if (response.statusCode >= 500) {
        console.log('An error has occurred.');
        process.exit(1);
      }
      Uuid = JSON.parse(body).Uuid;
      return createFromTemplate(template, Uuid);
    });
  })
};
