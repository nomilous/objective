// Generated by CoffeeScript 1.9.2
var create, deferred, fs, request, user;

user = require('../user');

request = require('request');

fs = require('fs');

deferred = require('also').deferred;

process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

module.exports = create = {
  "do": function(program, template, callback) {
    user.load();
    return create.generate_objective(program, template).then(function() {
      return callback();
    });
  },
  generate_objective: deferred(function(action, program, template) {
    var file, stats;
    file = program.file || 'objective';
    if (program.js) {
      if (!file.match(/.js$/)) {
        file = file + ".js";
      }
    } else {
      if (!file.match(/.coffee$/)) {
        file = file + ".coffee";
      }
    }
    try {
      stats = fs.lstatSync(file);
      if (stats.isDirectory()) {
        console.log("Cannot overwrite directory " + file);
        return action.resolve();
      }
      if (!program.force) {
        console.log("Warning " + file + " exists. Use --force to overwrite.");
        return action.resolve();
      }
    } catch (_error) {}
    return request.post({
      url: 'https://ipso.io/api/objectives/create',
      method: 'POST',
      headers: {
        'content-type': 'application/json',
        'key': user.key
      }
    }, function(error, response, body) {
      var e, templatePath, templatetxt, uuid;
      if (error != null) {
        console.log('An error has occurred.');
        process.exit(1);
      }
      if (response.statusCode === 401) {
        console.log('Bad key, try --refresh-user');
        process.exit(1);
      }
      if (response.statusCode >= 500) {
        console.log('An error has occurred.');
        process.exit(1);
      }
      uuid = JSON.parse(body).uuid;
      try {
        if (program.js) {
          templatePath = '/.objective/templates/' + template + '.js';
        } else {
          templatePath = '/.objective/templates/' + template + '.coffee';
        }
        templatetxt = fs.readFileSync(process.env.HOME + templatePath).toString();
        templatetxt = templatetxt.replace(/__UUID__/, uuid);
        console.log('-----> Created file ' + file + ' from template ~' + templatePath);
        console.log(templatetxt);
        return fs.writeFileSync(file, templatetxt);
      } catch (_error) {
        e = _error;
        console.log(e.toString());
        return action.resolve();
      }
    });
  })
};
