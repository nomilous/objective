// Generated by CoffeeScript 1.9.2
var code, deferred, email, fs, key, mkpath, password, prompt, register, request, username;

deferred = require('also').deferred;

prompt = require('prompt');

request = require('request');

fs = require('fs');

mkpath = require('mkpath');

process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

email = code = username = password = key = void 0;

module.exports = register = {
  "do": function(program, refresh, callback) {
    if (process.env.HOME == null) {
      console.log('missing HOME env variable');
      process.exit(1);
    }
    return register.prompt_email(refresh).then(function() {
      return register.prompt_code();
    }).then(function() {
      return register.prompt_username();
    }).then(function() {
      return register.prompt_password();
    }).then(function() {
      return callback();
    });
  },
  prompt_email: deferred(function(action, refresh) {
    var retry;
    retry = function() {
      console.log('\nPlease enter your email address.');
      return prompt.get('email', function(err, res) {
        if (err != null) {
          process.exit(1);
        }
        email = res.email;
        return request.post('https://ipso.io/api/register/email/' + email + '?refresh=' + refresh, function(error, response, body) {
          if (error != null) {
            console.log(error);
            process.exit(1);
          }
          if (response.statusCode === 404) {
            if (refresh) {
              console.log('\nNo such email address in system.');
            } else {
              console.log('\nAn error has occurred.');
            }
            process.exit(1);
          }
          if (response.statusCode === 403) {
            console.log('\nThat email address is already in use. (try --refresh)');
            return retry();
          }
          if (response.statusCode === 429) {
            console.log('\nYour host or proxy has exceeded the request limit. Please try again later.');
            process.exit(1);
          }
          if (response.statusCode === 500) {
            console.log('\nAn error has occurred.');
            process.exit(1);
          }
          if (response.statusCode === 201) {
            return action.resolve();
          }
        });
      });
    };
    return retry();
  }),
  prompt_code: deferred(function(action) {
    var retry;
    retry = function() {
      console.log('\nA registration code has been sent to that email address.\nPlease paste it here.');
      return prompt.get('code', function(err, res) {
        if (err != null) {
          process.exit(1);
        }
        code = res.code;
        return request.post("https://ipso.io/api/register/email/" + email + "/code/" + code, function(error, response, body) {
          if (error != null) {
            console.log(error);
            process.exit(1);
          }
          if (response.statusCode === 403) {
            console.log('\n Incorrect code!');
            return retry();
          }
          if (response.statusCode === 500) {
            console.log('\nAn error has occurred.');
            process.exit(1);
          }
          if (response.statusCode === 200) {
            return action.resolve();
          }
        });
      });
    };
    return retry();
  }),
  prompt_username: deferred(function(action) {
    var retry;
    retry = function() {
      console.log('\nPlease enter new username.');
      return prompt.get('username', function(err, res) {
        if (err != null) {
          process.exit(1);
        }
        username = res.username;
        return request.post("https://ipso.io/api/register/email/" + email + "/code/" + code + "/username/" + username, function(error, response, body) {
          if (error != null) {
            console.log(error);
            process.exit(1);
          }
          if (response.statusCode === 403) {
            console.log('\n That username is already in use.');
            return retry();
          }
          if (response.statusCode === 500) {
            console.log('\nAn error has occurred.');
            process.exit(1);
          }
          if (response.statusCode === 200) {
            return action.resolve();
          }
        });
      });
    };
    return retry();
  }),
  prompt_password: deferred(function(action) {
    var retry;
    retry = function() {
      console.log('\nPlease enter new password.');
      return prompt.get({
        properties: {
          password: {
            hidden: true
          },
          'confirm password': {
            hidden: true
          }
        }
      }, function(err, res) {
        if (res.password !== res['confirm password']) {
          console.log('\nPasswords did not match!');
          return retry();
        }
        password = res.password;
        return request.post({
          url: "https://ipso.io/api/register",
          method: 'POST',
          headers: {
            'content-type': 'application/json'
          },
          body: JSON.stringify({
            email: email,
            code: code,
            username: username,
            password: password
          })
        }, function(error, response, body) {
          var dir, ref, uuid;
          if (response.statusCode >= 500) {
            console.log('\nAn error has occurred.');
            process.exit(1);
          }
          ref = JSON.parse(body), key = ref.key, uuid = ref.uuid;
          dir = process.env.HOME + '/.objective';
          mkpath.sync(dir);
          dir = process.env.HOME + '/.objective/templates';
          mkpath.sync(dir);
          dir = process.env.HOME + '/.objective/templates/dev';
          mkpath.sync(dir);
          fs.writeFileSync(process.env.HOME + '/.objective/user.json', JSON.stringify({
            uuid: uuid,
            username: username,
            email: email,
            key: key
          }, null, 4));
          fs.writeFileSync(process.env.HOME + '/.objective/templates/default.coffee', "objective 'Untitled',\n\n    uuid: '__UUID__'\n    description: ''\n    private: __PRIVATE__\n    plugins: []\n\n.run (e) ->\n\n    return console.log e if e?\n");
          fs.writeFileSync(process.env.HOME + '/.objective/templates/dev.coffee', "objective 'Untitled',\n\n    uuid: '__UUID__'\n    description: ''\n    private: __PRIVATE__\n    plugins: ['objective-dev']\n\n.run (e) ->\n\n    return console.log e if e?\n\n    {prompt, recurse} = objective\n\n    dev.testDir = 'spec'\n    dev.sourceDir = 'src'\n    dev.compileTo = 'lib'\n\n    recurse ['spec', 'src'], create: true, (e) -> \n\n        return console.log e if e?\n\n        prompt()\n");
          fs.writeFileSync(process.env.HOME + '/.objective/templates/default.js', "objective( 'Untitled', {\n\n    uuid: '__UUID__',\n    description: '',\n    private: __PRIVATE__,\n    plugins: []\n\n}).run(function(e){\n\n    if (e) return console.log(e);\n\n});");
          fs.writeFileSync(process.env.HOME + '/.objective/templates/dev.js', "objective( 'Untitled', {\n\n    uuid: '__UUID__',\n    description: '',\n    private: __PRIVATE__,\n    plugins: ['objective-dev']\n\n}).run(function(e){\n\n    if (e) return console.log(e);\n\n    dev.testDir = 'spec'\n    dev.sourceDir = 'lib'\n\n    objective.recurse(['spec'], {create: true}, function(e) {\n\n        //todo: watch lib to run spec on change\n\n        if (e) return console.log(e);\n\n        objective.prompt();\n\n    });\n\n});");
          fs.writeFileSync(process.env.HOME + '/.objective/templates/dev/default_spec.js', "objective( '__TITLE__', {\n\n    uuid: '__UUID__',\n    title: '__TITLE__',\n    description: '',\n    private: __PRIVATE__,\n    plugins: ['objective-dev']\n\n}).run(function(e){\n\n    if (e) return console.log(e);\n\n    context('', function(){\n\n        it('');\n\n    });\n});");
          fs.writeFileSync(process.env.HOME + '/.objective/templates/dev/default_spec.coffee', "objective '__TITLE__',\n\n    uuid: '__UUID__'\n    description: ''\n    private: __PRIVATE__\n    plugins: ['objective-dev']\n\n.run (e) ->\n\n    return console.log e if e?\n\n    context '', -> it ''\n");
          console.log('\n');
          console.log('-----> Created file ' + process.env.HOME + '/.objective/user.json');
          console.log('-----> Created file ' + process.env.HOME + '/.objective/templates/default.coffee');
          console.log('-----> Created file ' + process.env.HOME + '/.objective/templates/dev.coffee');
          console.log('-----> Created file ' + process.env.HOME + '/.objective/templates/default.js');
          console.log('-----> Created file ' + process.env.HOME + '/.objective/templates/dev.js');
          console.log('-----> Created file ' + process.env.HOME + '/.objective/templates/dev/default_spec.js');
          console.log('-----> Created file ' + process.env.HOME + '/.objective/templates/dev/default_spec.coffee');
          console.log('\nRegistration complete.');
          return action.resolve();
        });
      });
    };
    return retry();
  })
};
