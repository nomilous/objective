// Generated by CoffeeScript 1.9.2
var TODO, debug, error, info, lstatSync, pipe, program, promise, readFileSync, ref, ref1, sep, sequence;

ref = require('fs'), lstatSync = ref.lstatSync, readFileSync = ref.readFileSync;

module.exports = program = require('commander');

ref1 = require('./logger'), info = ref1.info, error = ref1.error, debug = ref1.debug, TODO = ref1.TODO;

sep = require('path').sep;

promise = require('when').promise;

sequence = require('when/sequence');

program.stop = false;

pipe = require('./globals/pipeline');

pipe.createEvent('multiple.start');

pipe.createEvent('multiple.done');

program.version(JSON.parse(require('fs').readFileSync(__dirname + '/../package.json')).version).option('--root [file]', 'Run root objective from file. (name part)');

module.exports.start = function() {
  var e, file, i, len, ref2;
  program.parse(process.argv);
  if (program.register) {
    program.stop = true;
    return require('./actions/register')["do"](program, false, function() {});
  }
  if (program.reset) {
    program.stop = true;
    return require('./actions/register')["do"](program, true, function() {});
  }
  program.template || (program.template = 'default');
  if (program.create) {
    program.stop = true;
    return require('./actions/create')["do"](program, program.template, function() {});
  }
  if (program.createDev) {
    program.stop = true;
    return require('./actions/create')["do"](program, 'dev', function() {});
  }
  if (objective.root == null) {
    require('coffee-script').register();
    program.file = program.root;
    if (program.file != null) {
      info("Loading '" + program.file + "'");
      try {
        if (program.file[0] !== '/') {
          program.file = process.cwd() + sep + program.file;
        }
        require(program.file);
        return;
      } catch (_error) {
        e = _error;
        return error(e.stack);
      }
    }
    if (program.args.length > 0) {
      objective.noRoot = true;
      return sequence((function() {
        var i, len, ref2, results;
        ref2 = program.args;
        results = [];
        for (i = 0, len = ref2.length; i < len; i++) {
          file = ref2[i];
          results.push((function(file) {
            return function() {
              return promise(function(resolve, reject) {
                var done, modFile;
                try {
                  modFile = process.cwd() + sep + file;
                  require(modFile);
                  if (!(done = objective.waiting)) {
                    return resolve();
                  }
                  return done.then(function(r) {
                    return resolve(r);
                  }, function(e) {
                    resolve();
                    TODO('enable fail on error');
                    error(e);
                    return debug(e.stack);
                  });
                } catch (_error) {
                  e = _error;
                  console.log(e);
                  return resolve();
                }
              });
            };
          })(file));
        }
        return results;
      })()).then(function(result) {
        return pipe.emit('multiple.done', {
          result: result,
          error: null
        }, function(err, after) {
          var exitCode;
          exitCode = after.exitCode || 0;
          return process.exit(exitCode);
        });
      }, function(error) {
        return process.exit(1);
      });
    }
    ref2 = ['./objective.coffee', './objective.js'];
    for (i = 0, len = ref2.length; i < len; i++) {
      file = ref2[i];
      try {
        lstatSync(file);
        info("Loading '" + file + "'");
        try {
          require(process.cwd() + sep + file);
          return;
        } catch (_error) {
          e = _error;
          return error(e.stack);
        }
      } catch (_error) {}
    }
    if (!(program.args.length > 0)) {
      error('\nNothing to do.');
      return process.exit(1);
    }
  }
};
